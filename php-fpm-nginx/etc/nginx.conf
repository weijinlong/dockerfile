user  nginx;

worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;

# error_log   /data/logs/error.log;
# error_log  logs/error.log  notice;
error_log  /dev/stderr  info;

# pid        logs/nginx.pid;

# dso {
   # load ngx_http_concat_module.so;
   # load ngx_http_image_filter_module.so;
   # load ngx_http_upstream_session_sticky_module.so;
   # load ngx_http_lua_module.so;
   # load ngx_http_memcached_module.so;
# }

events {
  worker_connections  65535;
  use epoll;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  log_format  main  '$http_x_forwarded_for - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /dev/stdout  main;

  client_header_buffer_size 16k;
  client_body_buffer_size 128k;
  large_client_header_buffers 8 64k;
  client_max_body_size 50m;

  sendfile on;
  #tcp_nopush     on;

  keepalive_timeout 60;

  #指定连接到后端FastCGI的超时时间。
  fastcgi_connect_timeout 300;
  #向FastCGI传送请求的超时时间，这个值是指已经完成两次握手后向FastCGI传送请求的超时时间。
  fastcgi_send_timeout 300;
  #接收FastCGI应答的超时时间，这个值是指已经完成两次握手后接收FastCGI应答的超时时间。
  fastcgi_read_timeout 300;
  #定读取FastCGI应答第一部分需要用多大的缓冲区，一般第一部分应答不会超过1k，由于页面大小为4k，所以这里设置为4k。
  fastcgi_buffer_size 64k;
  #指定本地需要用多少和多大的缓冲区来缓冲FastCGI的应答。
  fastcgi_buffers 4 64k;
  #只知道默认值是fastcgi_buffers的两倍。
  fastcgi_busy_buffers_size 128k;
  #在写入fastcgi_temp_path时将用多大的数据块，默认值是fastcgi_buffers的两倍。
  fastcgi_temp_file_write_size 128k;
  #这个指令为Nginx配置FastCGI缓存指定一个路径，目录结构等级，关键字区域存储时间和非活动删除时间。
  fastcgi_cache_path /tmp/fastcgi_cache levels=1:2 keys_zone=TEST:10m inactive=5m;
  #指定读取FastCGI应答第一部分需要用多大的缓冲区，一般第一部分应答不会超过1k，由于页面大小为4k，所以这里设置为4k。
  #fastcgi_cache TEST;
  #为指定的应答代码指定缓存时间，如上例中将200，302应答缓存一小时，301应答缓存1天，其他为1分钟。
  #fastcgi_cache_valid 200 302 1h;
  #fastcgi_cache_valid 301 1d;
  #fastcgi_cache_valid any 1m;

  open_file_cache max=204800 inactive=20s;
  open_file_cache_min_uses 1;
  open_file_cache_valid 30s;

  gzip on;
  gzip_min_length  1k;
  gzip_buffers     16 64k;
  gzip_http_version 1.0;
  gzip_comp_level 6;
  gzip_types       text/javascript text/plain application/x-javascript text/css application/xml application/json;
  gzip_vary on;

  proxy_cache_path /dev/shm/nginx_proxy levels=1:2 keys_zone=pnc:300m inactive=2h max_size=1g;

  # limit_req_zone $binary_remote_addr zone=one:10m rate=2000r/s;
  # limit_req_zone $binary_remote_addr $uri zone=two:10m rate=500r/s;
  # limit_req_zone $binary_remote_addr $request_uri zone=thre:10m rate=500r/s;

  server
  {
    listen       80 default;
    # listen       443 ssl;

    root  /var/www/html/;

    # access_log  /data/logs/fxapi.access.log  main;
    index  index.html index.htm index.php;

    # ssl_certificate   cert/214709763810347.pem;
    # ssl_certificate_key  cert/214709763810347.key;
    # ssl_session_timeout 5m;
    # ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # ssl_prefer_server_ciphers on;

    location / {
      if (!-e $request_filename){
        rewrite ^/(.*)$ /index.php?s=$1 last;
      }
    }

    location ~ \.php$ {
      # try_files $uri =404;
      # fastcgi_split_path_info ^(.+\.php)(/.+)$;
      fastcgi_pass unix:/var/run/php-fpm.sock;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_param SCRIPT_NAME $fastcgi_script_name;
      # client_max_body_size 10mb;
      fastcgi_ignore_client_abort on;

      include        fastcgi_params;c
    }
  }
}
